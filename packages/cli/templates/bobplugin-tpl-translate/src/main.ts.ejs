import * as Bob from '@bob-plug/core';
import { getSupportLanguages } from './lang';
<% if (tpl.category === 'translate') { %>
import { _translate } from './translate';
<% } %>

<% if (tpl.category === 'tts') { %>
import { _tts } from './tts';
<% } %>

<% if (tpl.category === 'ocr') { %>
import { _ocr } from './ocr';
<% } %>

<% if (tpl.category !== 'ocr') { %>
// 使用 bob 实现的 require 方法加载本地库,
var formatString = require('./libs/human-string');
<% } %>

function supportLanguages(): Bob.supportLanguages {
  return getSupportLanguages();
}

// @ts-ignore
global.supportLanguages = supportLanguages;


<% if (tpl.category === 'translate') { %>
// https://ripperhe.gitee.io/bob/#/plugin/quickstart/translate
function translate(query: Bob.TranslateQuery, completion: Bob.Completion) {
  const { text = '', detectFrom, detectTo } = query;
  const str = formatString(text);
  const params = { from: detectFrom, to: detectTo, cache: Bob.api.getOption('cache') };
  let res = _translate(str, params);

  res
    .then((result) => completion({ result }))
    .catch((error) => {
      Bob.api.$log.error(JSON.stringify(error));
      if (error?.type) return completion({ error });
      completion({ error: Bob.util.error('api', '插件出错', error) });
    });
}

// @ts-ignore
global.translate = translate;
<% } %>

<% if (tpl.category === 'tts') { %>
// https://ripperhe.gitee.io/bob/#/plugin/quickstart/tts
function tts(query: Bob.TTSQuery, completion: Bob.Completion) {
  const { text = '', lang } = query;
  const str = formatString(text);
  const params = { from: lang, cache: Bob.api.getOption('cache') };
  let res = _tts(str, params);
  res
    .then((result) => completion({ result }))
    .catch((error) => {
      Bob.api.$log.error(JSON.stringify(error));
      if (error?.type) return completion({ error });
      completion({ error: Bob.util.error('api', '插件出错', error) });
    });
}

// @ts-ignore
global.tts = tts;
<% } %>

<% if (tpl.category === 'ocr') { %>
// https://ripperhe.gitee.io/bob/#/plugin/quickstart/ocr
function ocr(query: Bob.OcrQuery, completion: Bob.Completion) {
  const { image, from, detectFrom } = query;
  const params = { from, detectFrom, cache: Bob.api.getOption('cache') };
  let res = _ocr(image, params);
  res
    .then((result) => completion({ result }))
    .catch((error) => {
      Bob.api.$log.error(JSON.stringify(error));
      if (error?.type) return completion({ error });
      completion({ error: Bob.util.error('api', '插件出错', error) });
    });
}

// @ts-ignore
global.ocr = ocr;
<% } %>

